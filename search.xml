<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>about</title>
      <link href="/2020/04/03/about/"/>
      <url>/2020/04/03/about/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2020/04/03/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/03/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Git是分布式的版本控制系统</p><a id="more"></a><h2 id="常见命令学习"><a href="#常见命令学习" class="headerlink" title="常见命令学习"></a>常见命令学习</h2><p>git config –global user.name ‘’    # 设置提交的用户名和email<br>git config –global user.email ‘’<br>git init newproject        # 新建项目<br>git status    # 查看文件状态<br>git add file1    # 将工作目录文件添加到暂存区，暂存区进可提交，退可回滚<br>git add -u # 添加所有修改的文件<br>git commit -m’提交日志信息’    # 将暂存区文件提交到历史版本中<br>git commit –amend    # 修改最近一次的提交日志信息<br>git rebase -i commmitid        +r     # 修改commitid的子commit r的提交日志信息<br>git rebase -i commmitid        +s     # 合并commitid的子commit以及s的提交日志信息<br>git log    -n5 –oneline    # 一+行/s     行地显示最近5条提交日志信息<br>git mv file1 file2    # 重命名暂存区文件<br>git diff [– filename]    # 对比工作区和暂存区所有文件的差异，可以指定filename进行对比<br>git diff –cache    # 比较HEAD文件和暂存区文件，然后再提交<br>git diff commit1 commit2 [– file]    # 比较两次提交的所有文件/指定文件的差异<br>git reset HEAD     # 恢复暂存区为最新提交的<br>git checkout – file    # 将工作区文件恢复为暂存区文件<br>git reset –hard commitid     # 将HEAD指向commitid，丢掉commitid之后的提交<br>gir rm file     # 删除工作目录文件file，同时更新到暂存区<br>git stash [pop]    # 存放[恢复]当前工作目录状态<br>.gitignore    # 该文件内容为不需要git管控的文件或者文件夹</p><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><p>git branch -av    # 查看所有分支及当前分支<br>git branch glt commitid    # 由commitid来新建名为glt的分支<br>git branch -d addreadme    # 删除名为addreadme的分支<br>git checkout -b glt commitid    # 由commitid来新建名为glt的分支，并让HEAD指向该分支<br>git checkout commitid    # 让HEAD指向树中间的commitid而不是分支，导致分离头指针，HEAD不属于任何分支的commit有可能被丢弃<br>git checkout master    # 切换回master分支<br>gitk    # 图形化查看版本信息</p><h2 id="Git三大对象"><a href="#Git三大对象" class="headerlink" title="Git三大对象"></a>Git三大对象</h2><p>commit是当前提交时刻的对象，里面包含根节点tree，tree指向子节点tree或者叶节点blob，叶子节点blob是真正的文件内容。</p><p>git cat-file -p hashid    # 查看hashid指向的对象内容<br>git diff HEAD HEAD~2    # 比较HEAD和HEAD的父版本的父版本</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
