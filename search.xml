<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《TensorFlow快速入门与实战》学习笔记</title>
      <link href="/2020/04/21/TensorFlow%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
      <url>/2020/04/21/TensorFlow%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>本文包含机器学习理论，再到机器学习编程框架工具，最后介绍相关的实战案例<br><a id="more"></a></p><h2 id="机器学习-amp-深度学习"><a href="#机器学习-amp-深度学习" class="headerlink" title="机器学习 &amp; 深度学习"></a>机器学习 &amp; 深度学习</h2><p>机器学习、深度学习三个部分：模型、损失函数、优化算法</p><h3 id="常见损失函数"><a href="#常见损失函数" class="headerlink" title="常见损失函数"></a>常见<a href="https://www.jianshu.com/p/47172eb86b39" target="_blank" rel="noopener">损失函数</a></h3><ul><li>softmax_cross_entropy用于在二分类或者类别相互排斥的多分类任务中。</li><li>binary_cross_entropy是二分类的交叉熵，实际是多分类softmax_cross_entropy的一种特殊情况，当多分类中，类别只有两类时，即0或者1，即为二分类，二分类也是一个逻辑回归问题，也可以套用逻辑回归的损失函数（sigmoid_cross_entropy）。</li><li>sigmoid_cross_entropy用于类别独立且不相互排斥，可以执行多标签分类，如图片可以同时包含大象和狗。</li></ul><h3 id="梯度下降算法优化器"><a href="#梯度下降算法优化器" class="headerlink" title="梯度下降算法优化器"></a>梯度下降算法优化器</h3><ul><li>Momentum优化器：由于波谷容易来回震荡；引入上一轮的动量，加速收敛，抑制震荡。<script type="math/tex; mode=display">m=\lambda*g+\gamma*m</script><script type="math/tex; mode=display">\Delta\theta=-m</script>其中$\lambda$是学习率。</li><li>自适应优化器<a href="https://blog.csdn.net/program_developer/article/details/80756008" target="_blank" rel="noopener">AdaGrad</a>：有的参数更新很快，有的更新很慢，例如word2vec中常见词和生僻词的参数更新；为了尽可能保持参数更新步调一致，每个梯度除以它的历史梯度平方累加和的平方根（二阶动量），大的梯度缩小，小的梯度放大。<script type="math/tex; mode=display">\gamma=\gamma+g*g</script><script type="math/tex; mode=display">\Delta\theta=-\frac{\lambda*g}{\delta+\sqrt{\gamma}}</script></li><li>RMSprop优化器：AdaGrad优化器分母是递增的，会导致梯度提前减小到0，因此<a href="https://zhuanlan.zhihu.com/p/34230849" target="_blank" rel="noopener">RMSprop</a>只考虑最近几轮迭代中的梯度，利用指数加权平均的方法来计算二阶动量，指数级地缩小最早的梯度。<script type="math/tex; mode=display">\gamma=\beta*\gamma+(1-\beta)*g*g</script><script type="math/tex; mode=display">\Delta\theta=-\frac{\lambda*g}{\delta+\sqrt{\gamma}}</script></li><li>Adam优化器结合一阶动量和二阶动量，都是用指数加权平均。<script type="math/tex; mode=display">\gamma=\beta*\gamma+(1-\beta)*g*g</script><script type="math/tex; mode=display">\Delta\theta=-\frac{\epsilon*g}{\delta+\sqrt{\gamma}}</script></li></ul><h2 id="TensorFlow基本概念"><a href="#TensorFlow基本概念" class="headerlink" title="TensorFlow基本概念"></a>TensorFlow基本概念</h2><p>数据流图：有向边和节点<br>节点：数据节点（输入）、计算节点、存储节点（参数）</p><p>张量：数学上是几何体，0阶表示标量，1阶是向量，二阶是矩阵；<br>在TensorFlow中张量是相同数据类型的多维数组，是操作的输入和输出数据。<br>张量包含：常量、占位符（运行时确定）、变量</p><p>会话：是将数据流图提交到执行器上的client。<br>数据流图中入度为0的节点会被执行，并可以在不同设备上并行执行。</p><p>TensorFlow编程流程<br>定义模型输入输出<br>定义模型数据流图，即模型<br>运行数据流图会话</p><p>保存变量：tf.train.Saver.save()    # 保存模型训练的参数到文件中（checkpoint）<br>恢复变量：tf.train.Saver.restore()</p><p>TensorBoard可视化输入数据、训练参数、评价指标等。<br>tf.summary读写需要可视化的数据<br>tf.name_scope定义名字作用域，划分数据流图不同节点<br>dataframe.info()    # 显示pandas数据信息</p><h2 id="Keras常用命令"><a href="#Keras常用命令" class="headerlink" title="Keras常用命令"></a>Keras常用命令</h2><p>model=Sequential()定义模型<br>model.compile()编译模型<br>model.fit()训练模型<br>model.save()保存模型为HDF5文件<br>model.sumary()查看模型网络结构、参数个数<br>model.history模型训练过程中的关键指标记录</p><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><p>convolutional layer利用输入数据中特征的局部性和位置无关系来降低数量并提取局部特征。<br>pooling layer<br>dropout layer是一种正则化层，每一轮训练的时候随机关闭一些神经元，不进行更新；测试的时候所有神经元都是用的。<br>Flatten()层多维数据转换为一维数据</p><h2 id="python-amp-numpy-amp-matplot"><a href="#python-amp-numpy-amp-matplot" class="headerlink" title="python &amp; numpy &amp; matplot"></a>python &amp; numpy &amp; matplot</h2><p>np.nonzero()    # 保留非0数据<br>np.astype(‘float32’)    # 类型转换<br>str.lstrip(‘’)    # 左边特定字符串替换为空<br>plt.xticks([])    # 清空绘图坐标轴<br>plt.yticks([])</p><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><h3 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h3><p>Jupyter交互式开发环境<br>captcha验证码生成库<br>pillow图片读写库<br>pydot图片格式转换库<br>Flask轻量级web应用框架</p><h3 id="数据处理流程"><a href="#数据处理流程" class="headerlink" title="数据处理流程"></a>数据处理流程</h3><p>输入转灰度图后归一化<br>input_shape与channels_last<br>输出标签one-hot编码</p>]]></content>
      
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《玩转Git三剑客》学习笔记</title>
      <link href="/2020/04/03/%E7%8E%A9%E8%BD%ACGit%E4%B8%89%E5%89%91%E5%AE%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/03/%E7%8E%A9%E8%BD%ACGit%E4%B8%89%E5%89%91%E5%AE%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Git是分布式的版本控制系统，包含三大对象，commit是当前时刻提交的版本对象，里面包含根节点tree，tree指向子节点tree或者叶节点blob，叶子节点blob是真正的文件内容。<br><a id="more"></a></p><h2 id="常见命令学习"><a href="#常见命令学习" class="headerlink" title="常见命令学习"></a>常见命令学习</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>git config —global user.name ‘’    # 设置提交的用户名和email<br>git config —global user.email ‘’<br>git init newproject        # 新建项目<br>git status    # 查看文件状态</p><h3 id="暂存区命令"><a href="#暂存区命令" class="headerlink" title="暂存区命令"></a>暂存区命令</h3><p>git add file1    # 将工作目录文件添加到暂存区，暂存区进可提交，退可回滚<br>git add -u # 添加所有修改的文件到暂存区<br>git mv file1 file2    # 重命名暂存区文件<br>gir rm file     # 删除工作目录文件file，同时更新到暂存区<br>git diff [— filename]    # 对比工作区和暂存区所有文件的差异，可以指定filename进行对比<br>git diff —cache    # 比较HEAD文件和暂存区文件，然后再提交<br>git reset HEAD     # 恢复暂存区为最新提交的<br>git stash [pop]    # 临时存放[恢复]当前工作目录状态<br>git checkout — file    # 将工作区文件恢复为暂存区文件<br><img src="/2020/04/03/%E7%8E%A9%E8%BD%ACGit%E4%B8%89%E5%89%91%E5%AE%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/areas.png" class="" title="Git areas"></p><h3 id="仓库区命令"><a href="#仓库区命令" class="headerlink" title="仓库区命令"></a>仓库区命令</h3><p>git commit -m’提交日志信息’    # 将暂存区文件提交到历史版本中<br>git commit —amend    # 修改最近一次的提交日志信息<br>git rebase -i commmitid        +r     # 修改commitid的子commit r的提交日志信息<br>git rebase -i commmitid        +s     # 合并commitid的子commit以及s的提交日志信息<br>git log    -n5 —oneline    # 一行行地显示最近5条提交日志信息<br>git diff commit1 commit2 [— file]    # 比较两次提交的所有文件/指定文件的差异<br>git diff HEAD HEAD~2    # 比较HEAD和HEAD的父版本的父版本<br>git cat-file -p hashid    # 查看hashid指向的对象内容<br>git reset —hard commitid     # 将HEAD指向commitid，丢掉commitid之后的提交<br><img src="/2020/04/03/%E7%8E%A9%E8%BD%ACGit%E4%B8%89%E5%89%91%E5%AE%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB.png" class="" title="Git对象关系"></p><h2 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h2><h3 id="本地分支管理"><a href="#本地分支管理" class="headerlink" title="本地分支管理"></a>本地分支管理</h3><p>git branch -av    # 查看所有分支及当前分支<br>git branch glt commitid    # 由commitid来新建名为glt的分支<br>git branch -d addreadme    # 删除名为addreadme的分支<br>git checkout -b glt commitid    # 由commitid来新建名为glt的分支，并让HEAD指向该分支<br>git checkout commitid    # 让HEAD指向树中间的commitid而不是分支，导致分离头指针，HEAD不属于任何分支的commit有可能被丢弃<br>git checkout master    # 切换回master分支<br>gitk    # 图形化查看版本信息<br>.gitignore    # 该文件内容为不需要git管控的文件或者文件夹</p><h3 id="远端分支合并"><a href="#远端分支合并" class="headerlink" title="远端分支合并"></a>远端分支合并</h3><p>本地分支可以通过push备份到远端，然后进行合并。<br>git remote -v     # 查看本地的远程版本库信息<br>git remote add xxx <url>    # 将远端服务器上url库添加到本地，命名为xxx<br>git fetch xxx    # 拉取远程版本库xxx到本地<br>git merge -h    # 查看合并帮助信息<br>git merge —allow-unrelated-histories xxx/master    # 合并当前分支和xxx上的master分支（两分支不是父子关系fast forward，所以合并需要添加 —allow-unrelated-histories）<br>git push xxx    # 将本地的xxx推送更新到远程服务器上</p><p>当两个人修改不同文件或者同文件不同区域时，后push的人需要先fetch并merge别人的更新，然后再push。<br>同理，当两个人修改同文件相同同区域时，后push的人需要先pull（包含fetch和merge），并协商取舍后手动更新文件，然后再push。</p><h2 id="Git高危命令"><a href="#Git高危命令" class="headerlink" title="Git高危命令"></a>Git高危命令</h2><p>git reset —hard commitid     # 回退到之前的commitit<br>git push -f xxx    # 强制push到远端进行更新，可能会丢弃别人的工作版本<br>禁止对集成分支的历史commit做rebase操作，要根据集成分支的最新commit来提交更新。<br>rebase相当于在此之后的commit都重新提交，慎重使用。</p><h2 id="GitHub高级功能"><a href="#GitHub高级功能" class="headerlink" title="GitHub高级功能"></a>GitHub高级功能</h2><p>高级搜索：stars:&gt;1000,in:readme<br>issue跟踪需求和任务<br>看板管理任务进程<br>pull request合并之前代码review<br>merge三种策略:merge、squash、rebase</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo和GitHub在CentOS搭建个人网站</title>
      <link href="/2020/04/01/%E5%9F%BA%E4%BA%8EHEXO%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2020/04/01/%E5%9F%BA%E4%BA%8EHEXO%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>原理：Hexo作为客户端，利用Git提交静态博客文件到GitHub上，由GitHub托管网页。<br><a id="more"></a></p><h2 id="基础软件"><a href="#基础软件" class="headerlink" title="基础软件"></a>基础软件</h2><p>Hexo是基于nodejs的个人博客框架，所以搭建Hexo之前先按照nodejs及其包管理工具npm。</p><p>安装Git版本管理软件，设置提交更新的用户名和邮箱。<br>git config —global user.name “your name”<br>git config —global user.email “youremail@domain.com”</p><p>在GitHub上创建个人网站的仓库，需与GitHub用户名同名。为了能够让Hexo提交博客文件，生成SSH公钥，复制到GitHub设置里。</p><h2 id="安装部署命令"><a href="#安装部署命令" class="headerlink" title="安装部署命令"></a>安装部署命令</h2><p>tar -xf node-v12.16.1-linux-x64.tar<br>cd node-v12.16.1-linux-x64/bin<br>ln -s /home/software/node-v12.16.1-linux-x64/bin/node /usr/bin/node<br>ln -s /home/software/node-v12.16.1-linux-x64/bin/npm /usr/bin/npm<br>npm install hexo -g<br>hexo init blog<br>cd /home/glt/blog/<br>hexo generate<br>hexo deploy</p><h2 id="编译失败"><a href="#编译失败" class="headerlink" title="编译失败"></a>编译失败</h2><p>在Hexo在生成静态文件时，如果内存太小会导致进程killed，可以申请虚拟缓存交换空间<br>free -m<br>dd if=/dev/zero of=/swap bs=4096 count=1572864<br>mkswap /swap<br>swapon /swap<br>echo “LABEL=SWAP-sda /swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</p><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><p><a href="https://www.jianshu.com/p/8bf32184495e" target="_blank" rel="noopener">https://www.jianshu.com/p/8bf32184495e</a><br><a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders</a><br><a href="https://blog.csdn.net/linton1/article/details/90137367" target="_blank" rel="noopener">https://blog.csdn.net/linton1/article/details/90137367</a><br><a href="https://blog.csdn.net/zhanghanlun/article/details/104227808" target="_blank" rel="noopener">https://blog.csdn.net/zhanghanlun/article/details/104227808</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
